<%-
  groups = OodSupport::User.new.groups.sort_by(&:id).tap { |groups|
    groups.unshift(groups.delete(OodSupport::Process.group))
  }.map(&:name).grep(/.*[0-9]{5}/)

  all_groups = OodSupport::User.new.groups.sort_by(&:id).tap { |groups|
    groups.unshift(groups.delete(OodSupport::Process.group))
  }.map(&:name)
  has_slurm_apps = all_groups.include?("nesi-staff") || all_groups.include?("ondemand-slurm-apps")
-%>
title: "ANSYS Workbench"
description: |
  This app will launch ANSYS Workbench.
attributes:
  # select the cluster
  cluster:
    widget: "select"
    options:
      - [
          "Kubernetes", "my-k8s-cluster",
          data-hide-gpu: true,
          data-set-gpu: 'none',
        ]
<% if has_slurm_apps %>
      - ["Slurm HPC", "nesi_tdc_hpc"]
    help: |
      Kubernetes jobs are more likely to start promptly - "Slurm HPC" jobs may have to wait in the queue.
      If you need Apptainer or GPUs then you must choose "Slurm HPC" currently.
<% end %>
    cacheable: false  # we always want k8s at the top?

  bc_vnc_resolution:
    required: true
  account:
    label: Project Code
    widget: select
    options: 
      <%- groups.each do |group| %>
      - "<%= group %>"
      <%- end %>
    required: true
    display: true
  bc_num_hours:
    max: 24
    min: 1
    step: 1
    value: 1
    widget: number_field
  num_cores:
    label: Number of cores
    max: 4
    min: 1
    value: 2
    widget: number_field
    display: true
  num_mem:
    label: Memory per job (GB)
    max: 32
    min: 4
    step: 1
    value: 4
    widget: number_field
  ansysver:
    widget: select
    label: "ANSYS Version"
    required: true
    options:
    <%- 
      # Get available modules dynamically from LMOD paths
      begin
        module_path =  "/opt/nesi/lmod/mahuika/ANSYS"
        available_modules = []
        Dir.glob("#{module_path}/*.lua").each do |file|
          # Extract module name from file path
          relative_path = file.sub("#{module_path}/", "")
          module_name = relative_path.sub(/\.lua$/, "")                
          available_modules << module_name
        end
        
        # Sort modules and create options
        available_modules.uniq.sort.each do |mod|
          # Create a friendly display name
          display_name = mod.include?('/') ? "#{mod.split('/').first}/#{mod.split('/').last}" : mod
      -%>
      - ["<%= display_name %>", "<%= mod %>"]
      <%- 
        end
      end
      -%>
  ansyslic:
    widget: select
    label: "Licence"
    required: true
    options:
    <%- 
      # Get available licences dynamically from licence path
      begin
        lic_base_path =  "/opt/nesi/share/ANSYS/Licenses"
        all_lic = []
        Dir.glob("#{lic_base_path}/*.lic").each do |lic_path|
          if Pathname.new("lic_path").readable?
            all_lic << lic_path
          end
        end
        all_lic.each do |lic_path|
          lic_name = "#{lic_path.split('/').last.split('.').first}"
          -%>
            - ["<%= lic_name %>", "<%= lic_path %>"]
          <%- 
        end
      -%>
    help:<%- 
      if all_lic.empty?
      -%>
      "**WARNING: YOU DO NOT HAVE ACCESS TO A VALID ANSYS LICENCE**\n\nContact NeSI support if you believe this is a mistake."
      <%-
      else
      -%>
      "Select which licence to use."
      <%-
      end
    end
    -%>
    display: true
  gpu:
    label: GPU
    widget: select
    options:
      - 'none'
      - [ "L4 (24 GB VRAM, aimed at AI workloads, up to single precision)", 'L4' ]
      - [ "H100 (96 GB VRAM, recommend submitting as Slurm jobs due to potential wait times)", "H100" ]
    help: |
      **WARNING**: selecting a GPU can significantly increase the time it takes for your session to start!
    display: true
form:
  - cluster
  - account
  - bc_vnc_resolution
  - bc_num_hours
  - num_cores
  - num_mem
  - ansysver
  - ansyslic
  - gpu
